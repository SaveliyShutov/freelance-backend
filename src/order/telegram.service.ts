import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Telegraf } from 'telegraf';

import { OrderClass } from './schemas/order.schema';
import { UserClass } from '../user/schemas/user.schema';

@Injectable()
export class TelegramService implements OnModuleInit {
  private readonly logger = new Logger(TelegramService.name);

  private readonly token = process.env.TELEGRAM_BOT_TOKEN;
  private readonly chatId = process.env.TELEGRAM_CHAT_ID;
  private bot: Telegraf;

  constructor(
    @InjectModel('Order') private OrderModel: Model<OrderClass>,
    @InjectModel('User') private UserModel: Model<UserClass>,
  ) {
    if (!this.token) {
      throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
    }
    this.bot = new Telegraf(this.token);
  }

  async onModuleInit() {
    // –õ–æ–≤–∏–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã
    this.bot.on('text', async (ctx) => {
      const msg = ctx.message.text;
      const user = ctx.from;

      this.logger.log(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Telegram: ${msg}`);

      try {
        // —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑
        const orderFromDb = await this.OrderModel.create({
          title: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.username || user.first_name}`,
          description: msg,
          employer_id: user.id.toString(), // —Å–æ—Ö—Ä–∞–Ω—è–µ–º Telegram id –∫–∞–∫ employer_id
        });

        // –æ–±–Ω–æ–≤–ª—è–µ–º —é–∑–µ—Ä–∞ (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –±–∞–∑–µ)
        await this.UserModel.findByIdAndUpdate(orderFromDb.employer_id, {
          $push: { employer_orders: orderFromDb._id },
        });

        // —É–≤–µ–¥–æ–º–ª—è–µ–º –≥—Ä—É–ø–ø—É
        await this.sendMessage({
          title: orderFromDb.title,
          description: orderFromDb.description,
          _id: orderFromDb._id.toString(),
        });

        // –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await ctx.reply(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#${orderFromDb._id})`);
      } catch (err) {
        this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –∏–∑ Telegram', err as Error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
      }
    });

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await this.bot.launch();
    this.logger.log('Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è');
  }

  async sendMessage(job: { title: string; description: string; _id?: string }) {
    const cleanDescription = job.description
      ?.replace(/<\/?(p|div|br|span)[^>]*>/g, '')
      .trim();

    const text = `
–ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!
<b>${job.title}</b>

${cleanDescription}

üîó ${process.env.PUBLIC_APP_URL || 'http://localhost:3000'}/jobs/${job._id}
    `;

    try {
      const res = await fetch(
        `https://api.telegram.org/bot${this.token}/sendMessage`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: this.chatId,
            text,
            parse_mode: 'HTML',
          }),
        },
      );

      const data = await res.json();
      if (!data.ok) {
        this.logger.error('–û—à–∏–±–∫–∞ Telegram API: ' + JSON.stringify(data));
      }
    } catch (err) {
      this.logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram', err as Error);
    }
  }
}
