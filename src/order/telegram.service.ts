import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Telegraf, Markup } from 'telegraf';
import axios from 'axios';
import * as crypto from 'crypto';
import * as https from 'https';

import { OrderClass, OrderDocument } from './schemas/order.schema';

@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramService.name);
  private bot: Telegraf | null = null;

  constructor(
    @InjectModel('Order') private readonly orderModel: Model<OrderDocument>,
  ) {}

  async onModuleInit() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const gigaKey = process.env.GIGACHAT_API_KEY;

    if (!token) {
      this.logger.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
      return;
    }

    if (!gigaKey) {
      this.logger.warn('‚ö†Ô∏è GIGACHAT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
      return;
    }

    this.bot = new Telegraf(token);

    this.bot.on('text', async (ctx) => {
  const msg = ctx.message.text;
  const user = ctx.from;

  this.logger.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.username || user.first_name}: ${msg}`);

  try {
    // –ü–æ–º–µ—Å—Ç–∏ –≤ —Ñ–∞–π–ª/–≤–µ—Ä—à–∏–Ω—É TelegramService (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
function isPotentialWork(msg: string): { ok: boolean; score: number; reasons: string[] } {
  const text = msg.toLowerCase();

  let score = 0;
  const reasons: string[] = [];

  // + –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—Å–∏–ª—å–Ω—ã–µ)
  const strong = ['—Ç—Ä–µ–±—É–µ—Ç—Å—è', '—Ç—Ä–µ–±—É—é—Ç—Å—è', '–Ω—É–∂–µ–Ω', '–Ω—É–∂–Ω—ã', '–∏—â–µ–º', '–∏—â–µ—Ç—Å—è', '–≤–∞–∫–∞–Ω—Å–∏—è', '–≤–∞–∫–∞–Ω—Å–∏–∏'];
  for (const w of strong) if (text.includes(w)) { score += 3; reasons.push(`+kw:${w}`); }

  // + —Å–ª–æ–≤–∞ –ø—Ä–æ –æ–ø–ª–∞—Ç—É
  const pay = ['–ø–ª–∞—á—É', '–æ–ø–ª–∞—Ç–∞', '—Ä—É–±', '‚ÇΩ', '–∑/–ø', '–∑–∞—Ä–ø–ª–∞—Ç–∞'];
  for (const w of pay) if (text.includes(w)) { score += 3; reasons.push(`+pay:${w}`); }

  // + —Å–ª–æ–≤–∞ –ø—Ä–æ –≤—Ä–µ–º—è/—Å–º–µ–Ω—ã
  const timeWords = ['—á–∞—Å', '—á–∞—Å–∞', '–¥–µ–Ω—å', '–¥–Ω–µ–π', '—Å–º–µ–Ω–∞', '—Å–º–µ–Ω—ã', '–≤–µ—á–µ—Ä–æ–º', '—É—Ç—Ä–æ–º', '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è'];
  for (const w of timeWords) if (text.includes(w)) { score += 2; reasons.push(`+time:${w}`); }

  // + –Ω–∞–ª–∏—á–∏–µ —á–∏—Å–µ–ª/—Å—É–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä "1000", "6 000", "6000—Ä", "1000 —Ä—É–±")
  const moneyRegex = /(\d[\d\s.,]*\s?(—Ä—É–±|—Ä\b|‚ÇΩ)|\b\d{3,}\b)/i;
  if (moneyRegex.test(text)) { score += 3; reasons.push('+money'); }

  // + "–Ω–∞ X —á–µ–ª–æ–≤–µ–∫" –∏–ª–∏ "X —á–µ–ª–æ–≤–µ–∫"
  const pplRegex = /\b(\d+)\s*(—á–µ–ª–æ–≤–µ–∫–∞|—á–µ–ª|—á–µ–ª–æ–≤–µ–∫|–ª—é–¥–µ–π)\b/i;
  if (pplRegex.test(text)) { score += 2; reasons.push('+people'); }

  // + –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ "—Å 10 –¥–æ 18"
  const timeRange = /—Å\s*\d{1,2}[:.]?\d{0,2}\s*(–¥–æ|-)\s*\d{1,2}[:.]?\d{0,2}/i;
  if (timeRange.test(text)) { score += 2; reasons.push('+timerange'); }

  // - —Å–ª–æ–≤–∞ —è–≤–Ω–æ–π —à—É—Ç–∫–∏ / –Ω–µ—Ä–∞–±–æ—Ç—ã
  const jokewords = ['–ø—Ä–∏–∫–æ–ª', '—à—É—Ç–∫', '–º–µ–º', '–ª–æ–ª', '—Ö–∞—Ö–∞', '—Ö–∞—Ö', '–ø—Ä–∞–Ω–∫', '—Å–º–µ—à–Ω', '—Ö—É–π','—Ö—É–µ','–±–ª—è','–ª–æ—Ö','–ª–æ—à','—á—É—Ä–∫','—á–ª–µ–Ω','–µ–±–ª–∞–Ω','–ø–∏—Å—é–Ω','–º–∞—à–æ–Ω–∫','–º–æ—à–æ–Ω–∫','–≥–µ–π','–≥–µ–∏','—Å—Ä–∞–∫','–≥–µ—Ä–æ–∏–Ω','–≥–µ—Ä–∞','–≥–µ—Ä—ã—á','–º–µ—Ñ–µ–¥—Ä–æ–Ω','—Å–æ–ª—å','–ø—Ä–æ–Ω','–ø–æ—Ä–Ω','—Å—ç–∫—Å','–º–µ—Ñ'];
  for (const w of jokewords) if (text.includes(w)) { score -= 6; reasons.push(`-joke:${w}`); }

  // - –∫–æ—Ä–æ—Ç–∫–∏–µ / –æ–¥–Ω–æ—Å–ª–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (text.trim().split(/\s+/).length < 3) { score -= 2; reasons.push('-too-short'); }

  // - –º–∞—Å—Å–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–∫–∞–∫ –¥–µ–ª–∞" "–ø—Ä–∏–≤–µ—Ç"
  const trivial = ['–ø—Ä–∏–≤–µ—Ç', '–∫–∞–∫ –¥–µ–ª–∞', '–∑–¥–æ—Ä–æ–≤–æ', '—É—Ä–∞', '—Å–ø–∞—Å–∏–±–æ'];
  for (const w of trivial) if (text.includes(w)) { score -= 4; reasons.push(`-trivial:${w}`); }

  // –¥–ª–∏–Ω–∞: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –µ—Å–ª–∏ > 40 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–µ—Ä–æ—è—Ç–Ω–æ —Ä–µ–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ)
  if (text.length > 40) { score += 1; reasons.push('+long'); }

  // –∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä–æ–≥ ‚Äî –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–π: 3 ‚Äî –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–µ–µ, 6 ‚Äî —Å—Ç—Ä–æ–∂–µ.
  const threshold = 4;
  return { ok: score >= threshold, score, reasons };
}

    const check = isPotentialWork(msg);
if (!check.ok) {
  this.logger.log(`‚è≠ –ü—Ä–æ–ø—É—Å–∫ (score=${check.score}): ${check.reasons.join(', ')}`);
  return;
}
this.logger.log(`‚úÖ –ü—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä (score=${check.score}): ${check.reasons.join(', ')}`);


    const httpsAgent = new https.Agent({ rejectUnauthorized: false });

    const authResp = await axios.post(
      'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
      'scope=GIGACHAT_API_PERS',
      {
        headers: {
          Authorization: `Basic ${gigaKey}`,
          'Content-Type': 'application/x-www-form-urlencoded',
          RqUID: crypto.randomUUID(),
        },
        httpsAgent,
      },
    );


        const accessToken = authResp.data.access_token;

        const gptResp = await axios.post(
          'https://gigachat.devices.sberbank.ru/api/v1/chat/completions',
          {
            model: 'GigaChat:latest',
            messages: [
              {
                role: 'system',
                content: `
–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–∫–∞–∑–æ–≤. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ JSON.
–ü–æ–ª—è:
- title: –∫—Ä–∞—Ç–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
- description: —Å–∞–º–∞ —Å—É—Ç—å –∑–∞–¥–∞–Ω–∏—è
- date: YYYY-MM-DD (–ø–æ–Ω–∏–º–∞–π "—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ${new Date().toISOString().split('T')[0]})
- startTime: –µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä "—Å 10:00"), –∏–Ω–∞—á–µ "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
- address: –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã
- budget: –æ–ø–ª–∞—Ç–∞ –Ω–∞ 1 —á–µ–ª–æ–≤–µ–∫–∞. –õ–æ–≥–∏–∫–∞:
  * –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –æ–±—â–∞—è —Å—É–º–º–∞ –∏ –∫–æ–ª-–≤–æ –ª—é–¥–µ–π ‚Üí –¥–µ–ª–∏
  * –µ—Å–ª–∏ —Å—É–º–º–∞ "–∑–∞ —á–∞—Å" –∏ —É–∫–∞–∑–∞–Ω—ã —á–∞—Å—ã ‚Üí —É–º–Ω–æ–∂—å
  * –µ—Å–ª–∏ —Å—É–º–º–∞ "–∑–∞ –¥–µ–Ω—å" ‚Üí –±–µ—Ä–∏ –µ—ë
  * –µ—Å–ª–∏ —Å—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –±–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "–∑–∞ —Å–º–µ–Ω—É –ø–ª–∞—á—É 4000" ‚Üí —ç—Ç–æ –∑–∞ 1 —á–µ–ª–æ–≤–µ–∫–∞
- hours: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤ —á–∞—Å–∞—Ö (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ ‚Äî –≤—ã—á–∏—Å–ª–∏)


–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø–∏—à–∏ "–Ω–µ —É–∫–∞–∑–∞–Ω–æ". –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫—Ä–æ–º–µ JSON.`,
              },
              { role: 'user', content: msg },
            ],
            temperature: 0.2,
          },
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
              'Content-Type': 'application/json',
            },
            httpsAgent,
          },
        );

        const rawText = gptResp.data.choices[0].message.content;
        let parsedOrder: any;

        try {
          parsedOrder = JSON.parse(rawText);
        } catch {
          this.logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ GigaChat, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
          parsedOrder = {
            title: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.username || user.first_name}`,
            description: msg,
            date: new Date().toISOString().split('T')[0],
            startTime: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
            address: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
            budget: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
            hours: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
          };
        }

        const safeDate = new Date(parsedOrder.date);
        const orderDate = isNaN(safeDate.getTime()) ? new Date() : safeDate;

        const createdOrder = await this.orderModel.create({
          title: parsedOrder.title || `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.username || user.first_name}`,
          description: parsedOrder.description || msg,
          applications: [],
          employer_id: new Types.ObjectId(), // placeholder
          employer_name: user.username || user.first_name,
          date: orderDate,
          startTime: parsedOrder.startTime !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' ? parsedOrder.startTime : '',
          address: parsedOrder.address !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' ? parsedOrder.address : '',
          budget: parsedOrder.budget !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' ? parsedOrder.budget : '',
          hours: parsedOrder.hours !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' ? parsedOrder.hours : '',
          paymentType: 'shift',
          type: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ Telegram',
          createdAt: new Date(),
          dateType: 'by agreement',
        });

        const message = `
<b>‚ú® –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ!</b>

<b>${parsedOrder.title}</b>
üìù ${parsedOrder.description}

üìÖ <b>–î–∞—Ç–∞:</b> ${parsedOrder.date || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
‚è∞ <b>–í—Ä–µ–º—è:</b> ${parsedOrder.startTime || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üìç <b>–ê–¥—Ä–µ—Å:</b> ${parsedOrder.address || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> ${parsedOrder.budget || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} —Ä—É–±–ª–µ–π
‚è≥ <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> ${parsedOrder.hours || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} ${parsedOrder.hours > 4 ? '—á–∞—Å–æ–≤' : (parsedOrder.hours == 1 ? '—á–∞—Å' : (parsedOrder.hours>=2 && parsedOrder.hours<=4 ? '—á–∞—Å–∞' : ''))}

üë§ –ê–≤—Ç–æ—Ä: ${user.username ? '@' + user.username : user.first_name}
        `;

        await ctx.replyWithHTML(
          message,
          Markup.inlineKeyboard([
            [
              Markup.button.callback('üí¨ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', `http://localhost:3011/apply/${createdOrder._id}`),
              parsedOrder.address && parsedOrder.address !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                ? Markup.button.url('üìç –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É', `https://yandex.ru/maps/?text=${encodeURIComponent(parsedOrder.address)}`)
                : null,
            ].filter(Boolean),
            user.username
              ? [Markup.button.url('üìû –°–≤—è–∑–∞—Ç—å—Å—è', `https://t.me/${user.username}`)]
              : [],
          ])
        );

      } catch (err) {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', err as Error);
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
      }
    });

    this.bot.launch()
      .then(() => this.logger.log('ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'))
      .catch(err => this.logger.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞', err));
  }

  async onModuleDestroy() {
    if (this.bot) {
      await this.bot.stop();
      this.logger.log('üõë Telegram-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}
