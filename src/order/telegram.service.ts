import { Injectable, Logger, OnModuleInit, OnModuleDestroy } from '@nestjs/common';
import { InjectModel } from '@nestjs/mongoose';
import { Model, Types } from 'mongoose';
import { Telegraf } from 'telegraf';
import axios from 'axios';
import * as crypto from 'crypto';
import * as https from 'https';

import { OrderClass, OrderDocument } from './schemas/order.schema';

@Injectable()
export class TelegramService implements OnModuleInit, OnModuleDestroy {
  private readonly logger = new Logger(TelegramService.name);
  private bot: Telegraf | null = null;

  constructor(
    @InjectModel('Order') private readonly orderModel: Model<OrderDocument>,
  ) {}

  async onModuleInit() {
    const token = process.env.TELEGRAM_BOT_TOKEN;
    const gigaKey = process.env.GIGACHAT_API_KEY;

    if (!token) {
      this.logger.warn('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
      return;
    }

    if (!gigaKey) {
      this.logger.warn('‚ö†Ô∏è GIGACHAT_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ .env');
      return;
    }

    this.bot = new Telegraf(token);

    this.bot.on('text', async (ctx) => {
      const msg = ctx.message.text;
      const user = ctx.from;

      this.logger.log(`üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.username || user.first_name}: ${msg}`);

      try {
        // --- –∏–≥–Ω–æ—Ä self-signed —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ ---
        const httpsAgent = new https.Agent({ rejectUnauthorized: false });

        // --- –ø–æ–ª—É—á–∞–µ–º access_token ---
        const authResp = await axios.post(
          'https://ngw.devices.sberbank.ru:9443/api/v2/oauth',
          'scope=GIGACHAT_API_PERS',
          {
            headers: {
              Authorization: `Basic ${gigaKey}`,
              'Content-Type': 'application/x-www-form-urlencoded',
              RqUID: crypto.randomUUID(),
            },
            httpsAgent,
          },
        );

        const accessToken = authResp.data.access_token;

        // --- –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ GigaChat ---
        const gptResp = await axios.post(
          'https://gigachat.devices.sberbank.ru/api/v1/chat/completions',
          {
            model: 'GigaChat:latest',
            messages: [
              {
                role: 'system',
                content: `
–¢—ã –ø–∞—Ä—Å–µ—Ä –∑–∞–∫–∞–∑–æ–≤. –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON —Å –ø–æ–ª—è–º–∏:
- title
- description
- date (YYYY-MM-DD, —É—á–∏—Ç—ã–≤–∞–π "—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ ${new Date().toISOString().split('T')[0]})
- startTime
- address
- budget (–æ–ø–ª–∞—Ç–∞ –∑–∞ –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞; –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–±—â–∞—è —Å—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π ‚Äî –¥–µ–ª–∏; –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Å—É–º–º–∞ –±–µ–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî —ç—Ç–æ –∑–∞ –æ–¥–Ω–æ–≥–æ)
- hours

–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø–∏—à–∏ "–Ω–µ —É–∫–∞–∑–∞–Ω–æ". –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫—Ä–æ–º–µ JSON.`,
              },
              { role: 'user', content: msg },
            ],
            temperature: 0.2,
          },
          {
            headers: {
              Authorization: `Bearer ${accessToken}`,
              'Content-Type': 'application/json',
            },
            httpsAgent,
          },
        );

        const rawText = gptResp.data.choices[0].message.content;
        let parsedOrder: any;

        try {
          parsedOrder = JSON.parse(rawText);
        } catch {
          this.logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ GigaChat, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
          parsedOrder = {
            title: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.username || user.first_name}`,
            description: msg,
            date: new Date().toISOString().split('T')[0],
            startTime: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
            address: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
            budget: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
            hours: '–Ω–µ —É–∫–∞–∑–∞–Ω–æ',
          };
        }

        // --- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
        const safeDate = new Date(parsedOrder.date);
        const orderDate = isNaN(safeDate.getTime()) ? new Date() : safeDate;

        const createdOrder = await this.orderModel.create({
          title: parsedOrder.title || `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${user.username || user.first_name}`,
          description: parsedOrder.description || msg,
          applications: [],
          employer_id: new Types.ObjectId(), // placeholder
          employer_name: user.username || user.first_name,
          date: orderDate,
          startTime: parsedOrder.startTime !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' ? parsedOrder.startTime : '',
          address: parsedOrder.address !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' ? parsedOrder.address : '',
          budget: parsedOrder.budget !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' ? parsedOrder.budget : '',
          hours: parsedOrder.hours !== '–Ω–µ —É–∫–∞–∑–∞–Ω–æ' ? parsedOrder.hours : '',
          paymentType: 'shift',
          type: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–∑ Telegram',
          createdAt: new Date(),
          dateType: 'by agreement',
        });

        await ctx.reply(`‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (#${createdOrder._id})`);
      } catch (err) {
        this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', err as Error);
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ');
      }
    });

    this.bot.launch()
      .then(() => this.logger.log('ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è'))
      .catch(err => this.logger.error('üö® –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞', err));
  }

  async onModuleDestroy() {
    if (this.bot) {
      await this.bot.stop();
      this.logger.log('üõë Telegram-–±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }
}
